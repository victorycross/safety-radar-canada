import { supabase } from '@/integrations/supabase/client';
import { AlertLevel } from '@/types';

export interface StaffIncidentReport {
  id: string;
  title: string;
  description: string;
  province_id: string;
  alert_level: string;
  submitted_by?: string;
  contact_info: string;
  anonymous: boolean;
  submission_timestamp: string;
  tracking_number: string;
  review_status: 'pending' | 'approved' | 'rejected';
  reviewed_by?: string;
  reviewed_at?: string;
  review_notes?: string;
  raw_form_data?: any;
  created_at: string;
  updated_at: string;
}

export interface StaffIncidentSubmission {
  title: string;
  description: string;
  provinceId: string;
  alertLevel: AlertLevel;
  contactInfo: string;
  anonymous: boolean;
  submittedBy?: string;
}

// Submit a new staff incident report
export const submitStaffIncidentReport = async (
  reportData: StaffIncidentSubmission
): Promise<{ success: boolean; trackingNumber?: string; error?: string }> => {
  try {
    const { data, error } = await supabase
      .from('staff_incident_reports')
      .insert([
        {
          title: reportData.title,
          description: reportData.description,
          province_id: reportData.provinceId,
          alert_level: reportData.alertLevel,
          contact_info: reportData.contactInfo,
          anonymous: reportData.anonymous,
          submitted_by: reportData.anonymous ? null : reportData.submittedBy,
          raw_form_data: reportData as any,
          tracking_number: '' // Will be auto-generated by trigger
        }
      ])
      .select('tracking_number')
      .single();

    if (error) {
      console.error('Error submitting staff incident report:', error);
      return { success: false, error: error.message };
    }

    return { 
      success: true, 
      trackingNumber: data?.tracking_number 
    };
  } catch (error: any) {
    console.error('Failed to submit staff incident report:', error);
    return { success: false, error: error.message };
  }
};

// Fetch all staff incident reports (for admin review)
export const fetchStaffIncidentReports = async (
  status?: 'pending' | 'approved' | 'rejected'
): Promise<StaffIncidentReport[]> => {
  try {
    let query = supabase
      .from('staff_incident_reports')
      .select(`
        *,
        province:provinces(id, name, code)
      `)
      .order('created_at', { ascending: false });

    if (status) {
      query = query.eq('review_status', status);
    }

    const { data, error } = await query;

    if (error) {
      console.error('Error fetching staff incident reports:', error);
      throw error;
    }

    return (data || []) as StaffIncidentReport[];
  } catch (error) {
    console.error('Failed to fetch staff incident reports:', error);
    throw error;
  }
};

// Approve a staff incident report
export const approveStaffIncidentReport = async (
  reportId: string,
  reviewNotes?: string
): Promise<{ success: boolean; incidentId?: string; error?: string }> => {
  try {
    const { data: userId } = await supabase.auth.getUser();
    if (!userId.user) {
      return { success: false, error: 'User not authenticated' };
    }

    const { data, error } = await supabase.rpc('approve_staff_incident_report', {
      report_id: reportId,
      reviewer_id: userId.user.id,
      review_notes_text: reviewNotes
    });

    if (error) {
      console.error('Error approving staff incident report:', error);
      return { success: false, error: error.message };
    }

    return { success: true, incidentId: data };
  } catch (error: any) {
    console.error('Failed to approve staff incident report:', error);
    return { success: false, error: error.message };
  }
};

// Reject a staff incident report
export const rejectStaffIncidentReport = async (
  reportId: string,
  reviewNotes: string
): Promise<{ success: boolean; error?: string }> => {
  try {
    const { data: userId } = await supabase.auth.getUser();
    if (!userId.user) {
      return { success: false, error: 'User not authenticated' };
    }

    const { error } = await supabase.rpc('reject_staff_incident_report', {
      report_id: reportId,
      reviewer_id: userId.user.id,
      review_notes_text: reviewNotes
    });

    if (error) {
      console.error('Error rejecting staff incident report:', error);
      return { success: false, error: error.message };
    }

    return { success: true };
  } catch (error: any) {
    console.error('Failed to reject staff incident report:', error);
    return { success: false, error: error.message };
  }
};

// Check status of a staff incident report by tracking number
export const checkReportStatus = async (
  trackingNumber: string
): Promise<StaffIncidentReport | null> => {
  try {
    const { data, error } = await supabase
      .from('staff_incident_reports')
      .select(`
        *,
        province:provinces(id, name, code)
      `)
      .eq('tracking_number', trackingNumber)
      .single();

    if (error) {
      if (error.code === 'PGRST116') {
        return null; // Not found
      }
      console.error('Error checking report status:', error);
      throw error;
    }

    return data as StaffIncidentReport;
  } catch (error) {
    console.error('Failed to check report status:', error);
    throw error;
  }
};